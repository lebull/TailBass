type EventAssignment @aws_iam @aws_cognito_user_pools {
  slotNumber: Int
  profileID: ID!
  eventID: ID!
  id: ID!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  Profile: Profile @aws_iam @aws_cognito_user_pools
}

type Event @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String
  hostUserName: String
  startDateTime: AWSDateTime
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  EventAssignments(filter: ModelEventAssignmentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelEventAssignmentConnection @aws_iam @aws_cognito_user_pools
}

type Profile @aws_iam @aws_cognito_user_pools {
  id: ID!
  owner: String
  djname: String
  genre: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  EventAssignments(filter: ModelEventAssignmentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelEventAssignmentConnection @aws_iam @aws_cognito_user_pools
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelEventAssignmentConnection @aws_iam @aws_cognito_user_pools {
  items: [EventAssignment]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelEventAssignmentFilterInput {
  slotNumber: ModelIntInput
  profileID: ModelIDInput
  eventID: ModelIDInput
  id: ModelIDInput
  and: [ModelEventAssignmentFilterInput]
  or: [ModelEventAssignmentFilterInput]
  not: ModelEventAssignmentFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getEventAssignment(id: ID!): EventAssignment @aws_iam @aws_cognito_user_pools
  listEventAssignments(filter: ModelEventAssignmentFilterInput, limit: Int, nextToken: String): ModelEventAssignmentConnection @aws_iam @aws_cognito_user_pools
  syncEventAssignments(filter: ModelEventAssignmentFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelEventAssignmentConnection @aws_iam @aws_cognito_user_pools
  getEvent(id: ID!): Event @aws_iam @aws_cognito_user_pools
  listEvents(filter: ModelEventFilterInput, limit: Int, nextToken: String): ModelEventConnection @aws_iam @aws_cognito_user_pools
  syncEvents(filter: ModelEventFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelEventConnection @aws_iam @aws_cognito_user_pools
  listProfiles(filter: ModelProfileFilterInput, limit: Int, nextToken: String): ModelProfileConnection @aws_iam @aws_cognito_user_pools
  getProfile(id: ID!): Profile @aws_iam @aws_cognito_user_pools
  profilesByOwner(owner: String, sortDirection: ModelSortDirection, filter: ModelProfileFilterInput, limit: Int, nextToken: String): ModelProfileConnection @aws_iam @aws_cognito_user_pools
  syncProfiles(filter: ModelProfileFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelProfileConnection @aws_iam @aws_cognito_user_pools
}

input CreateEventAssignmentInput {
  slotNumber: Int
  profileID: ID!
  eventID: ID!
  id: ID
  _version: Int
  eventAssignmentProfileId: ID
}

input UpdateEventAssignmentInput {
  slotNumber: Int
  profileID: ID
  eventID: ID
  id: ID!
  _version: Int
  eventAssignmentProfileId: ID
}

input DeleteEventAssignmentInput {
  id: ID
  _version: Int
}

type Mutation {
  createEventAssignment(input: CreateEventAssignmentInput!, condition: ModelEventAssignmentConditionInput): EventAssignment @aws_iam @aws_cognito_user_pools
  updateEventAssignment(input: UpdateEventAssignmentInput!, condition: ModelEventAssignmentConditionInput): EventAssignment @aws_iam @aws_cognito_user_pools
  deleteEventAssignment(input: DeleteEventAssignmentInput!, condition: ModelEventAssignmentConditionInput): EventAssignment @aws_iam @aws_cognito_user_pools
  createEvent(input: CreateEventInput!, condition: ModelEventConditionInput): Event @aws_iam @aws_cognito_user_pools
  updateEvent(input: UpdateEventInput!, condition: ModelEventConditionInput): Event @aws_iam @aws_cognito_user_pools
  deleteEvent(input: DeleteEventInput!, condition: ModelEventConditionInput): Event @aws_iam @aws_cognito_user_pools
  createProfile(input: CreateProfileInput!, condition: ModelProfileConditionInput): Profile @aws_iam @aws_cognito_user_pools
  updateProfile(input: UpdateProfileInput!, condition: ModelProfileConditionInput): Profile @aws_iam @aws_cognito_user_pools
  deleteProfile(input: DeleteProfileInput!, condition: ModelProfileConditionInput): Profile @aws_iam @aws_cognito_user_pools
}

input ModelEventAssignmentConditionInput {
  slotNumber: ModelIntInput
  profileID: ModelIDInput
  eventID: ModelIDInput
  and: [ModelEventAssignmentConditionInput]
  or: [ModelEventAssignmentConditionInput]
  not: ModelEventAssignmentConditionInput
}

type Subscription {
  onCreateEventAssignment: EventAssignment @aws_subscribe(mutations: ["createEventAssignment"]) @aws_iam @aws_cognito_user_pools
  onUpdateEventAssignment: EventAssignment @aws_subscribe(mutations: ["updateEventAssignment"]) @aws_iam @aws_cognito_user_pools
  onDeleteEventAssignment: EventAssignment @aws_subscribe(mutations: ["deleteEventAssignment"]) @aws_iam @aws_cognito_user_pools
  onCreateEvent: Event @aws_subscribe(mutations: ["createEvent"]) @aws_iam @aws_cognito_user_pools
  onUpdateEvent: Event @aws_subscribe(mutations: ["updateEvent"]) @aws_iam @aws_cognito_user_pools
  onDeleteEvent: Event @aws_subscribe(mutations: ["deleteEvent"]) @aws_iam @aws_cognito_user_pools
  onCreateProfile: Profile @aws_subscribe(mutations: ["createProfile"]) @aws_iam @aws_cognito_user_pools
  onUpdateProfile: Profile @aws_subscribe(mutations: ["updateProfile"]) @aws_iam @aws_cognito_user_pools
  onDeleteProfile: Profile @aws_subscribe(mutations: ["deleteProfile"]) @aws_iam @aws_cognito_user_pools
}

type ModelEventConnection @aws_iam @aws_cognito_user_pools {
  items: [Event]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelEventFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  hostUserName: ModelStringInput
  startDateTime: ModelStringInput
  and: [ModelEventFilterInput]
  or: [ModelEventFilterInput]
  not: ModelEventFilterInput
}

input CreateEventInput {
  id: ID
  name: String
  hostUserName: String
  startDateTime: AWSDateTime
  _version: Int
}

input UpdateEventInput {
  id: ID!
  name: String
  hostUserName: String
  startDateTime: AWSDateTime
  _version: Int
}

input DeleteEventInput {
  id: ID
  _version: Int
}

input ModelEventConditionInput {
  name: ModelStringInput
  hostUserName: ModelStringInput
  startDateTime: ModelStringInput
  and: [ModelEventConditionInput]
  or: [ModelEventConditionInput]
  not: ModelEventConditionInput
}

type ModelProfileConnection @aws_iam @aws_cognito_user_pools {
  items: [Profile]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelProfileFilterInput {
  id: ModelIDInput
  owner: ModelStringInput
  djname: ModelStringInput
  genre: ModelStringInput
  and: [ModelProfileFilterInput]
  or: [ModelProfileFilterInput]
  not: ModelProfileFilterInput
}

input CreateProfileInput {
  id: ID
  owner: String
  djname: String
  genre: String
  _version: Int
}

input UpdateProfileInput {
  id: ID!
  owner: String
  djname: String
  genre: String
  _version: Int
}

input DeleteProfileInput {
  id: ID
  _version: Int
}

input ModelProfileConditionInput {
  owner: ModelStringInput
  djname: ModelStringInput
  genre: ModelStringInput
  and: [ModelProfileConditionInput]
  or: [ModelProfileConditionInput]
  not: ModelProfileConditionInput
}
